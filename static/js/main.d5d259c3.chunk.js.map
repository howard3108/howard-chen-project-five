{"version":3,"sources":["firebase.js","Form.js","Header.js","Footer.js","SnowFlake.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","className","action","htmlFor","onChange","this","props","whenChange","type","placeholder","value","userValue","id","onClick","userClick","Component","Header","Footer","href","SnowFlake","aria-hidden","App","handleChange","event","setState","userInput","target","handleClick","preventDefault","checkUserInput","state","undefined","Swal","fire","text","icon","database","ref","push","deleteWish","child","remove","wishList","on","snapshot","wishes","val","newWishes","key","individualWish","wishId","wishTitle","style","maxHeight","map","wishValue","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAgBAA,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAMMR,QAAf,E,iBCSeS,G,uLAvBX,OACE,yBAAKC,UAAU,SACb,0BAAMC,OAAO,IACX,2BAAOC,QAAQ,YAAYF,UAAU,mBAArC,4BAGA,2BACEG,SAAUC,KAAKC,MAAMC,WACrBC,KAAK,OACLC,YAAY,2BACZC,MAAOL,KAAKC,MAAMK,UAClBC,GAAG,YACHX,UAAU,iBAEZ,4BAAQY,QAASR,KAAKC,MAAMQ,UAAWb,UAAU,iBAAjD,wB,GAhBSc,cCQJC,G,MARA,WACb,OACE,gCACE,oDCOSC,G,MAVA,WACb,OACE,gCACE,sCACU,uBAAGC,KAAK,iCAAR,mBCWDC,G,MAfG,WAChB,OACE,yBAAKlB,UAAU,aAAamB,cAAY,QACtC,yBAAKnB,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,UACA,yBAAKA,UAAU,aAAf,a,QCqGSoB,G,mBApGb,aAAe,IAAD,8BACZ,+CA0BFC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOhB,SA7Bd,EAkCdiB,YAAc,SAAAJ,GACZA,EAAMK,iBACN,IAAMC,EAAiB,EAAKC,MAAML,UAEX,KAAnBI,QAA4CE,IAAnBF,EAC3BG,IAAKC,KAAK,CACRzB,KAAM,QACN0B,KAAM,uCACNC,KAAM,WAGM5C,EAAS6C,WAAWC,MAC5BC,KAAK,EAAKR,MAAML,WAEtB,EAAKD,SAAS,CACZC,UAAW,OAjDH,EAuDdc,WAAa,SAAAhB,GACGhC,EAAS6C,WAAWC,MAC5BG,MAAMjB,EAAMG,OAAOd,IAAI6B,UAvD7B,EAAKX,MAAQ,CACXY,SAAU,GACVjB,UAAW,IAJD,E,iFAQO,IAAD,OACJlC,EAAS6C,WAAWC,MAC5BM,GAAG,SAAS,SAAAC,GAChB,IAAMC,EAASD,EAASE,MAClBC,EAAY,GAClB,IAAK,IAAIC,KAAOH,EAAQ,CACtB,IAAMI,EAAiB,CACrBC,OAAQF,EACRG,UAAWN,EAAOG,IAEpBD,EAAUT,KAAKW,GAGjB,EAAKzB,SAAS,CACZkB,SAAUK,S,+BAsCN,IAAD,OACP,OACE,yBAAK9C,UAAU,OACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAWmD,MAAO,CAAEC,UAAW,MAC7B,4BACGhD,KAAKyB,MAAMY,SAASY,KAAI,SAACC,EAAWC,GACnC,OACE,wBAAIR,IAAKQ,GACP,yBAAKvD,UAAU,cAAcsD,EAAUJ,WACvC,yBACEvC,GAAI2C,EAAUL,OACdjD,UAAU,2BACVY,QAAS,EAAK0B,YAHhB,YAaZ,kBAAC,EAAD,CACEhC,WAAYF,KAAKiB,aACjBX,UAAWN,KAAKyB,MAAML,UACtBX,UAAWT,KAAKsB,gBAItB,kBAAC,EAAD,W,GAhGUZ,cCAE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d5d259c3.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Initialize Firebase\r\n// USE YOUR CONFIG OBJECT\r\nconst config = {\r\n  apiKey: 'AIzaSyBqcc-q4pSkeqJTq7av7WievczFm-nWrNI',\r\n  authDomain: 'project5todolist.firebaseapp.com',\r\n  databaseURL: 'https://project5todolist.firebaseio.com',\r\n  projectId: 'project5todolist',\r\n  storageBucket: 'project5todolist.appspot.com',\r\n  messagingSenderId: '813027294022',\r\n  appId: '1:813027294022:web:518bb92506d2de68318347'\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport default firebase;\r\n","import React, { Component } from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <div className='input'>\r\n        <form action=''>\r\n          <label htmlFor='wishLabel' className='visually-hidden'>\r\n            Enter your holiday wish!\r\n          </label>\r\n          <input\r\n            onChange={this.props.whenChange}\r\n            type='text'\r\n            placeholder='Enter your holiday wish!'\r\n            value={this.props.userValue}\r\n            id='wishLabel'\r\n            className='input__field'\r\n          />\r\n          <button onClick={this.props.userClick} className='input__button'>\r\n            Send your wish\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1>Holiday Wish List</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>\r\n        Made by <a href='https://github.com/howard3108'>Howard Chen</a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './SnowFlake.css';\r\n\r\nconst SnowFlake = () => {\r\n  return (\r\n    <div className='snowflakes' aria-hidden='true'>\r\n      <div className='snowflake'>❅</div>\r\n      <div className='snowflake'>❆</div>\r\n      <div className='snowflake'>❅</div>\r\n      <div className='snowflake'>❆</div>\r\n      <div className='snowflake'>❅</div>\r\n      <div className='snowflake'>❆</div>\r\n      <div className='snowflake'>❅</div>\r\n      <div className='snowflake'>❆</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnowFlake;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './setup.css';\nimport firebase from './firebase';\nimport Swal from 'sweetalert2';\nimport Form from './Form';\nimport Header from './Header';\nimport Footer from './Footer';\nimport SnowFlake from './SnowFlake';\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css';\n\nclass App extends Component {\n  // create state and make it into an array as it keeps same order.\n  constructor() {\n    super();\n    this.state = {\n      wishList: [],\n      userInput: ''\n    };\n  }\n  // connect to firebase\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', snapshot => {\n      const wishes = snapshot.val();\n      const newWishes = [];\n      for (let key in wishes) {\n        const individualWish = {\n          wishId: key,\n          wishTitle: wishes[key]\n        };\n        newWishes.push(individualWish);\n      }\n\n      this.setState({\n        wishList: newWishes\n      });\n    });\n  }\n  //this is for when the user changes input\n  handleChange = event => {\n    this.setState({\n      userInput: event.target.value\n    });\n  };\n\n  //when user clicks button\n  handleClick = event => {\n    event.preventDefault();\n    const checkUserInput = this.state.userInput;\n    // if input is empty then display invalid entry\n    if (checkUserInput === '' || checkUserInput === undefined) {\n      Swal.fire({\n        type: 'error',\n        text: 'This is an invalid entry try again!!',\n        icon: 'error'\n      });\n    } else {\n      const dbRef = firebase.database().ref();\n      dbRef.push(this.state.userInput);\n      // reset into empty string\n      this.setState({\n        userInput: ''\n      });\n    }\n  };\n\n  // deletewish\n  deleteWish = event => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(event.target.id).remove();\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='wrapper'>\n          <SnowFlake />\n          <Header />\n          <div className='wish-and-form'>\n            <div className='wish'>\n              <SimpleBar style={{ maxHeight: 575 }}>\n                <ul>\n                  {this.state.wishList.map((wishValue, i) => {\n                    return (\n                      <li key={i}>\n                        <div className='wish__list'>{wishValue.wishTitle}</div>\n                        <div\n                          id={wishValue.wishId}\n                          className='removeWish wish__removal'\n                          onClick={this.deleteWish}\n                        >\n                          X\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </SimpleBar>\n            </div>\n            <Form\n              whenChange={this.handleChange}\n              userValue={this.state.userInput}\n              userClick={this.handleClick}\n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}